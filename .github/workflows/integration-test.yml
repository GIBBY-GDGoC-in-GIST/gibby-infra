name: Integration Test Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  # 외부 저장소에서 트리거될 수 있도록 설정
  repository_dispatch:
    types: [trigger-integration-test]

jobs:
  frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Frontend
        uses: actions/checkout@v3
        with:
          repository: GIBBY-GDGoC-in-GIST/GIBBY_frontend
          path: GIBBY_frontend
          # 시크릿은 gibby-infra 저장소에 설정된 것을 사용
          token: ${{ secrets.INTEGRATION_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'GIBBY_frontend/package-lock.json'

      - name: Install Dependencies
        run: |
          cd GIBBY_frontend
          npm ci

      - name: Run Tests
        run: |
          cd GIBBY_frontend
          # 특정 테스트 파일만 실행
          CI=true NODE_ENV=test npm test --no-watch --no-cache --testMatch="**/src/api.integration.test.js" --passWithNoTests
        env:
          CI: true
          NODE_ENV: test
          SKIP_PREFLIGHT_CHECK: true

  backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Backend
        uses: actions/checkout@v3
        with:
          repository: GIBBY-GDGoC-in-GIST/gibby-be
          path: gibby-be
          token: ${{ secrets.INTEGRATION_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'gibby-be/package-lock.json'

      - name: Install Dependencies
        run: |
          cd gibby-be
          npm ci

      - name: Run Tests
        run: |
          cd gibby-be
          npm test
        env:
          CI: true
          NODE_ENV: test

  integration-test:
    needs: [frontend, backend]
    runs-on: ubuntu-latest
    # 작업 이름에 소스 정보 표시
    name: Integration Test triggered by ${{ github.event.client_payload.source_repo || github.event_name }}
    steps:
      - name: Show Trigger Source
        run: echo "Integration test triggered by ${{ github.event.client_payload.source_repo || github.event_name }}"

      - name: Checkout Frontend
        uses: actions/checkout@v3
        with:
          repository: GIBBY-GDGoC-in-GIST/GIBBY_frontend
          path: GIBBY_frontend
          token: ${{ secrets.INTEGRATION_TOKEN }}

      - name: Checkout Backend
        uses: actions/checkout@v3
        with:
          repository: GIBBY-GDGoC-in-GIST/gibby-be
          path: gibby-be
          token: ${{ secrets.INTEGRATION_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Frontend Dependencies
        run: |
          cd GIBBY_frontend
          npm ci

      - name: Configure Integration Tests
        run: |
          cd GIBBY_frontend
          # 통합 테스트 파일 생성
          cat > src/api.integration.test.js << 'EOF'
          // 기본적인 API 통합 테스트
          describe('백엔드 API 통합 테스트', () => {
            // API URL 환경 변수 확인
            test('API URL이 설정되어 있는지 확인', () => {
              const apiUrl = process.env.API_URL || 'http://localhost:3000';
              expect(apiUrl).toBeTruthy();
              console.log(`Using API URL: ${apiUrl}`);
            });

            test('간단한 테스트', () => {
              expect(true).toBe(true);
            });
          });
          EOF
          echo "통합 테스트 파일이 생성되었습니다."

      - name: Start Backend Server
        run: |
          cd gibby-be
          npm run start:dev &
          sleep 10  # 서버가 완전히 시작될 때까지 대기
        env:
          NODE_ENV: test

      - name: Run Integration Tests (from ${{ github.event.client_payload.source_repo || github.event_name }})
        run: |
          cd GIBBY_frontend
          export API_URL=http://localhost:3000
          echo "Using API URL: $API_URL"
          # 특정 테스트 파일만 실행
          CI=true npm test -- --no-watch --no-cache --testMatch="**/src/api.integration.test.js" --passWithNoTests
        env:
          CI: true
          API_URL: http://localhost:3000 
